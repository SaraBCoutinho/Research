# -*- coding: utf-8 -*-
"""Oracle_Experimento_Caso2_datasets_revisando.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hckb0YB4Hg2fzLEfA3z-d6JRdNcm7wgG

#Imports
"""

from google.colab import drive
import pandas as pd
import numpy as np
from sklearn.metrics import f1_score

from sklearn.preprocessing import Normalizer
from sklearn.datasets import make_classification

from sklearn.metrics import accuracy_score, precision_score, recall_score

"""# Datasets

"""

!mkdir Data
!mkdir Data/liar
!mkdir Data/covid19
!mkdir Data/fakes
!mkdir Data/buzzfeednews
!mkdir Data/kaggle

#dataset
drive.mount('/content/drive')

#LIAR 2
dataset_name='liar'
pred_val=pd.read_csv('/content/drive/MyDrive/cin_Pesquisa/NLP:FakeNews/4_Codes/FN/Analysis Clusters/files_casos_1_2_3_4_revisando/'+dataset_name+'/2/c/pred_val_2_c.csv')
pred_val.to_csv('/content/Data/liar/pred_val_2_c.csv')
#"/content/drive/MyDrive/cin_Pesquisa/NLP:FakeNews/4_Codes/FN/Analysis Clusters/files_casos_1_2_3_4_revisando/"+dataset_name+"/2/bert/pred_val_2_c.csv"

#LIAR 6
dataset_name='liar'
pred_val=pd.read_csv('/content/drive/MyDrive/cin_Pesquisa/NLP:FakeNews/4_Codes/FN/Analysis Clusters/files_casos_1_2_3_4_revisando/'+dataset_name+'/2/a/pred_val_2_a.csv')
pred_val.to_csv('/content/Data/liar/pred_val_2_a.csv')
#dataset_name=
#"/content/drive/MyDrive/cin_Pesquisa/NLP:FakeNews/4_Codes/FN/Analysis Clusters/files_casos_1_2_3_4_revisando/"+dataset_name+"/2/bert/pred_val_2_a.csv"

#COVID
dataset_name='covid19'
pred_val=pd.read_csv('/content/drive/MyDrive/cin_Pesquisa/NLP:FakeNews/4_Codes/FN/Analysis Clusters/files_casos_1_2_3_4_revisando/COVID-19/2/pred_val_2_b.csv')
pred_val.to_csv('/content/Data/covid19/pred_val_2_b.csv')
#"/content/drive/MyDrive/cin_Pesquisa/NLP:FakeNews/4_Codes/FN/Analysis Clusters/files_casos_1_2_3_4_revisando/"+dataset_name+"/2/bert/pred_val_2_b.csv"

#FAKES
dataset_name='fakes'
pred_val=pd.read_csv('/content/drive/MyDrive/cin_Pesquisa/NLP:FakeNews/4_Codes/FN/Analysis Clusters/files_casos_1_2_3_4_revisando/'+dataset_name+'/2/pred_val_2_c.csv')
pred_val.to_csv('/content/Data/fakes/pred_val_2_c.csv')
#"/content/drive/MyDrive/cin_Pesquisa/NLP:FakeNews/4_Codes/FN/Analysis Clusters/files_casos_1_2_3_4_revisando/"+dataset_name+"/2/bert/pred_val_2_b.csv"

#BUZZFEEDNEWS
dataset_name='buzzfeednews'
pred_val=pd.read_csv('/content/drive/MyDrive/cin_Pesquisa/NLP:FakeNews/4_Codes/FN/Analysis Clusters/files_casos_1_2_3_4_revisando/'+dataset_name+'/2/pred_val_2_c.csv')
pred_val.to_csv('/content/Data/buzzfeednews/pred_val_2_c.csv')
#"/content/drive/MyDrive/cin_Pesquisa/NLP:FakeNews/4_Codes/FN/Analysis Clusters/files_casos_1_2_3_4_revisando/"+dataset_name+"/2/bert/pred_val_2_b.csv"

#KAGGLE
dataset_name='kaggle'
pred_val=pd.read_csv('/content/drive/MyDrive/cin_Pesquisa/NLP:FakeNews/4_Codes/FN/Analysis Clusters/files_casos_1_2_3_4_revisando/'+dataset_name+'/2/pred_val_2_c.csv')
pred_val.to_csv('/content/Data/kaggle/pred_val_2_c.csv')
#"/content/drive/MyDrive/cin_Pesquisa/NLP:FakeNews/4_Codes/FN/Analysis Clusters/files_casos_1_2_3_4_revisando/"+dataset_name+"/2/bert/pred_val_2_b.csv"

"""# ORACLE Functions"""

#datasets binarios - exceto Liar 
def load_predictions(dataset_name):
    #path =  '/content/Data/' + dataset_name + '/pred_val_2_a' + '.csv' # liar6
    path =  '/content/Data/' + dataset_name + '/pred_val_2_b' + '.csv' # covid
    #path =  '/content/Data/' + dataset_name + '/pred_val_2_c' + '.csv' #liar2, fakes, buzzfeednews, kaggle
    table_pred = pd.read_csv(path)
    label = table_pred['label']
    methods = table_pred.drop('label', axis=1)
    methods = methods.drop('Unnamed: 0', axis=1)
    return label, methods

def get_oracle(labels, pred={}, clfs=[]):
    cont = 0;
    list_yes = np.zeros((len(labels)))
    oracle_preds = np.zeros((len(labels)))
    for i, k in enumerate(labels):
        acertou = False
        for clf in clfs:
            if pred[clf][i] == k:
                acertou = True
                oracle_preds[i] = pred[clf][i]
                break
        if acertou:
            cont += 1
            list_yes[i] = k
        else:
            oracle_preds[i] = pred[clf][0]
            if k == 0:
                list_yes[i] = 1
            else:
                list_yes[i] = 0
    return cont, list_yes, oracle_preds

clfs = ['SVM-CV', 'SVM-TFIDF', 'SVM-W2V', 'SVM-GLOVE', 'SVM-FAST','KNN-CV', 'KNN-TFIDF','KNN-W2V', 'KNN-GLOVE', 'KNN-FAST','MLP-CV','MLP-TFIDF','MLP-W2V','MLP-GLOVE','MLP-FAST','NB-CV','NB-TFIDF','NB-W2V','NB-GLOVE','NB-FAST',
        'EXTRA-CV','EXTRA-TFIDF','EXTRA-W2V','EXTRA-GLOVE','EXTRA-FAST','RF-CV','RF-TFIDF','RF-W2V','RF-GLOVE','RF-FAST','LR-CV','LR-TFIDF','LR-W2V','LR-GLOVE','LR-FAST','CNN-CV','CNN-TFIDF','CNN-W2V','CNN-GLOVE','CNN-FAST']

#clfs2 = ['SVM-CV', 'SVM-TFIDF', 'SVM-W2V', 'SVM-GLOVE', 'SVM-FAST', 'SVM-BERT','KNN-CV', 'KNN-TFIDF','KNN-W2V', 'KNN-GLOVE', 'KNN-FAST', 'KNN-BERT','MLP-CV','MLP-TFIDF','MLP-W2V','MLP-GLOVE','MLP-FAST', 'MLP-BERT',
#        'NB-CV','NB-TFIDF','NB-W2V','NB-GLOVE','NB-FAST',' NB-BERT','EXTRA-CV','EXTRA-TFIDF','EXTRA-W2V','EXTRA-GLOVE','EXTRA-FAST', 'EXTRA-BERT',
#        'RF-CV','RF-TFIDF','RF-W2V','RF-GLOVE','RF-FAST', 'RF-BERT','LR-CV','LR-TFIDF','LR-W2V','LR-GLOVE','LR-FAST', 'LR-BERT','CNN-CV','CNN-TFIDF','CNN-W2V','CNN-GLOVE','CNN-FAST', 'CNN-BERT']

#oracle group A
names = {}
names['MLP'] = ['MLP-FAST','MLP-GLOVE','MLP-CV','MLP-TFIDF','MLP-W2V']#,'MLP-BERT']
names['KNN'] = ['KNN-FAST','KNN-GLOVE','KNN-CV','KNN-TFIDF','KNN-W2V']#,'KNN-BERT']
names['EXTRA'] = ['EXTRA-FAST','EXTRA-GLOVE','EXTRA-CV','EXTRA-TFIDF','EXTRA-W2V']#,'EXTRA-BERT']
names['RF'] = ['RF-FAST','RF-GLOVE','RF-CV','RF-TFIDF','RF-W2V']#,'RF-BERT']
names['SVM'] = ['SVM-FAST','SVM-GLOVE','SVM-CV','SVM-TFIDF','SVM-W2V']#,'SVM-BERT']
names['LR'] = ['LR-FAST','LR-GLOVE','LR-CV','LR-TFIDF','LR-W2V']#,'LR-BERT']
names['NB'] = ['NB-FAST','NB-GLOVE','NB-CV','NB-TFIDF','NB-W2V']#,'NB-BERT']
names['CNN'] = ['CNN-FAST','CNN-GLOVE','CNN-CV','CNN-TFIDF','CNN-W2V']#,'CNN-BERT']

#oracle group B
names = {}
names['fast'] = ['MLP-FAST','KNN-FAST','EXTRA-FAST','RF-FAST','SVM-FAST','LR-FAST','NB-FAST','CNN-FAST']
names['glove'] = ['MLP-GLOVE','KNN-GLOVE','EXTRA-GLOVE','RF-GLOVE','SVM-GLOVE','LR-GLOVE','NB-GLOVE','CNN-GLOVE']
names['cv'] = ['MLP-CV','KNN-CV','EXTRA-CV','RF-CV','SVM-CV','LR-CV','NB-CV','CNN-CV']
names['tfidf'] = ['MLP-TFIDF','KNN-TFIDF','EXTRA-TFIDF','RF-TFIDF','SVM-TFIDF','LR-TFIDF','NB-TFIDF','CNN-TFIDF']
names['w2v'] = ['MLP-W2V','KNN-W2V','EXTRA-W2V','RF-W2V','SVM-W2V','LR-W2V','NB-W2V','NB-W2V']
#names['bert'] = ['MLP-BERT','KNN-BERT','EXTRA-BERT','RF-BERT','SVM-BERT','LR-BERT','NB-BERT','NB-BERT']

#norm = Normalizer()
#X, y = make_classification()
#X_norm = norm.fit_transform(X)
#X_norm

def calculate_oracle(group,dataset_name,names_dataset,stacking,metric):
  #oracle group D
  if group == 'D':
    names = {}
    #dataset_name = 'liar'
    #Stacking LR - Accuracy - ([0.6090000000000004, 36], None)
    #names['liar'] = ['CNN-CV', 'KNN-W2V', 'KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'KNN-GLOVE', 'KNN-CV', 'EXTRA-W2V', 'RF-GLOVE', 'SVM-TFIDF', 'RF-TFIDF', 'LR-TFIDF', 'LR-GLOVE', 'RF-CV', 'SVM-FAST', 'EXTRA-FAST', 'NB-FAST', 'MLP-CV', 'MLP-TFIDF', 'NB-GLOVE', 'SVM-W2V', 'SVM-GLOVE', 'SVM-CV', 'MLP-GLOVE', 'NB-CV', 'NB-W2V', 'NB-TFIDF', 'RF-W2V', 'RF-FAST'] 
    label, methods = load_predictions(dataset_name)
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
    print('Stacking: ',stacking,'obtained for a metric:',metric,'a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
  #oracle group A
  elif group == 'A':
    names = {}                
    for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
      oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
      print(f"{name}: {oracle}")
      if metric in [precision_score,recall_score,f1_score]:
        score = metric(label.to_numpy(), oracle_preds)
      else:
        score = metric(label.to_numpy(), oracle_preds, average='macro')
      print(f"{name} metric: {score}")
  #oracle group B
  elif group == 'B':
    names = {}       
    for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
        oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
        print(f"{name}: {oracle}")
        if metric in [precision_score,recall_score,f1_score]:
          score = metric(label.to_numpy(), oracle_preds)
        else:
          score = metric(label.to_numpy(), oracle_preds, average='macro')
        print(f"{name} metric: {score}")
  #oracle group C
  elif group == 'C':
    names = {}       
    for name in clfs:
        oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
        print(f"{name}: {oracle}")
        if metric in [precision_score,recall_score,f1_score]:
          score = metric(label.to_numpy(), oracle_preds)
        else:
          score = metric(label.to_numpy(), oracle_preds, average='macro')
        print(f"{name} metric: {score}")

"""# Ensemble Sets """

#--LIAR 2 
#lista com os integrantes que deram os melhores resultados no stacking 
#oracle group D 
#Stacking LR - Accuracy - ([0.6090000000000004, 36], None)
#names['liar'] = ['CNN-CV', 'KNN-W2V', 'KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'KNN-GLOVE', 'KNN-CV', 'EXTRA-W2V', 'RF-GLOVE', 'SVM-TFIDF', 'RF-TFIDF', 'LR-TFIDF', 'LR-GLOVE', 'RF-CV', 'SVM-FAST', 'EXTRA-FAST', 'NB-FAST', 'MLP-CV', 'MLP-TFIDF', 'NB-GLOVE', 'SVM-W2V', 'SVM-GLOVE', 'SVM-CV', 'MLP-GLOVE', 'NB-CV', 'NB-W2V', 'NB-TFIDF', 'RF-W2V', 'RF-FAST'] 
#Stacking LR - Precision - ([0.6080000000000002, 24], None)
#names['liar'] = ['CNN-CV', 'KNN-W2V', 'KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'KNN-TFIDF', 'KNN-CV', 'RF-GLOVE', 'RF-TFIDF', 'LR-TFIDF', 'RF-CV', 'EXTRA-FAST', 'NB-FAST', 'MLP-CV', 'MLP-TFIDF', 'SVM-W2V', 'SVM-CV', 'NB-CV', 'NB-TFIDF', 'RF-W2V'] 
#Stacking LR - Recall - ([0.6159999999999998, 25], None)
#names['liar'] = ['CNN-CV', 'KNN-W2V', 'KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'KNN-TFIDF', 'KNN-CV', 'RF-GLOVE', 'SVM-TFIDF', 'LR-CV', 'RF-CV', 'EXTRA-FAST', 'NB-FAST', 'MLP-CV', 'MLP-TFIDF', 'SVM-W2V', 'SVM-CV', 'NB-CV', 'NB-TFIDF', 'RF-W2V'] 
#Stacking LR - F1 - ([0.6020000000000002, 23], None)
#names['liar'] = ['CNN-CV', 'KNN-W2V', 'KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'CNN-W2V', 'MLP-FAST', 'EXTRA-TFIDF', 'KNN-TFIDF', 'KNN-CV', 'RF-GLOVE', 'SVM-TFIDF', 'LR-CV', 'RF-CV', 'EXTRA-FAST', 'NB-FAST', 'MLP-CV', 'MLP-TFIDF', 'SVM-W2V', 'SVM-CV', 'NB-CV', 'NB-TFIDF', 'RF-W2V'] 
#Stacking RF - Accuracy - ([0.6495238095238095, 21], None)
#names['liar'] = ['KNN-W2V', 'CNN-GLOVE', 'CNN-FAST', 'CNN-W2V', 'EXTRA-CV', 'EXTRA-TFIDF', 'KNN-TFIDF', 'EXTRA-W2V', 'RF-GLOVE', 'RF-TFIDF', 'LR-TFIDF', 'SVM-FAST', 'EXTRA-FAST', 'NB-FAST', 'MLP-CV', 'MLP-TFIDF', 'SVM-W2V', 'SVM-GLOVE', 'MLP-GLOVE', 'NB-TFIDF', 'RF-W2V'] 
#Stacking RF - Precision -
#names['liar'] =
#Stacking RF - Recall -
#names['liar'] =
#Stacking RF - F1 -
#names['liar'] =
#Stacking NB - Accuracy - ([0.663, 3], None)
#names['liar'] = ['CNN-GLOVE', 'LR-TFIDF', 'SVM-W2V'] 
#Stacking NB - Precision - ([0.6170000000000005, 32], None)
#names['liar'] = ['CNN-CV', 'KNN-W2V', 'KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'KNN-CV', 'EXTRA-W2V', 'RF-GLOVE', 'RF-TFIDF', 'LR-TFIDF', 'LR-GLOVE', 'RF-CV', 'SVM-FAST', 'EXTRA-FAST', 'NB-FAST', 'MLP-CV', 'MLP-TFIDF', 'SVM-W2V', 'SVM-GLOVE', 'SVM-CV', 'MLP-W2V', 'NB-CV', 'NB-TFIDF', 'RF-W2V', 'RF-FAST'] 
#Stacking NB - Recall -([0.6239999999999999, 32], None)
#names['liar'] = ['CNN-CV', 'KNN-W2V', 'KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'KNN-CV', 'EXTRA-W2V', 'RF-GLOVE', 'SVM-TFIDF', 'LR-CV', 'LR-GLOVE', 'RF-CV', 'SVM-FAST', 'EXTRA-FAST', 'NB-FAST', 'MLP-CV', 'MLP-TFIDF', 'SVM-W2V', 'SVM-GLOVE', 'SVM-CV', 'MLP-W2V', 'NB-CV', 'NB-TFIDF', 'RF-W2V', 'RF-FAST'] 
#Stacking NB - F1 - ([0.6170000000000005, 32], None)
#names['liar'] = ['CNN-CV', 'KNN-W2V', 'KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'KNN-CV', 'EXTRA-W2V', 'RF-GLOVE', 'SVM-TFIDF', 'LR-CV', 'LR-GLOVE', 'RF-CV', 'SVM-FAST', 'EXTRA-FAST', 'NB-FAST', 'MLP-CV', 'MLP-TFIDF', 'SVM-W2V', 'SVM-GLOVE', 'SVM-CV', 'MLP-W2V', 'NB-CV', 'NB-TFIDF', 'RF-W2V', 'RF-FAST']

#oracle group D 
#Liar 6
#Stacking LR - Accuracy - ([0.22400000000000003, 11], None)
names['liar'] = ['KNN-W2V', 'CNN-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'MLP-TFIDF', 'NB-TFIDF', 'MLP-W2V', 'LR-W2V', 'SVM-FAST', 'RF-TFIDF', 'SVM-W2V'] 
#Stacking LR - Precision -
#names['liar'] = 
#Stacking LR - Recall -
#names['liar'] = 
#Stacking LR - F1 -
#names['liar'] = 
#Stacking RF - Accuracy - ([0.241625, 16], None)
names['liar'] = ['KNN-W2V', 'CNN-GLOVE', 'CNN-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'KNN-GLOVE', 'EXTRA-FAST', 'MLP-TFIDF', 'NB-TFIDF', 'MLP-W2V', 'NB-CV', 'LR-W2V', 'SVM-FAST', 'RF-TFIDF', 'SVM-TFIDF', 'SVM-W2V'] 
#Stacking RF - Precision -
#names['liar'] =
#Stacking RF - Recall -
#names['liar'] =
#Stacking RF - F1 -
#names['liar'] =
#Stacking NB - Accuracy - ([0.23200000000000004, 5], None)
names['liar'] = ['CNN-FAST', 'EXTRA-CV', 'MLP-W2V', 'LR-W2V', 'RF-TFIDF'] 
#Stacking NB - Precision -
#names['liar'] =
#Stacking NB - Recall -
#names['liar'] =
#Stacking NB - F1 -
#names['liar'] =

#oracle group D 
#Stacking LR - Accuracy - ([0.9310000000000003, 39], None)
names['covid19'] = ['LR-TFIDF', 'LR-CV', 'LR-W2V', 'RF-CV', 'SVM-FAST', 'RF-GLOVE', 'LR-FAST', 'SVM-GLOVE', 'SVM-CV', 'SVM-TFIDF', 'RF-TFIDF', 'MLP-GLOVE', 'RF-W2V', 'MLP-W2V', 'NB-CV', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'SVM-W2V', 'CNN-GLOVE', 'MLP-FAST', 'KNN-FAST', 'CNN-FAST', 'CNN-CV', 'KNN-W2V', 'CNN-TFIDF', 'CNN-W2V', 'MLP-CV', 'MLP-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'NB-FAST', 'KNN-CV', 'EXTRA-W2V', 'KNN-GLOVE'] 
#Stacking LR - Precision - ([0.9410000000000001, 40], None)
names['covid19'] = ['LR-TFIDF', 'LR-GLOVE', 'LR-CV', 'LR-W2V', 'RF-CV', 'SVM-FAST', 'RF-GLOVE', 'LR-FAST', 'SVM-GLOVE', 'SVM-CV', 'SVM-TFIDF', 'RF-TFIDF', 'MLP-GLOVE', 'RF-W2V', 'MLP-W2V', 'NB-CV', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'SVM-W2V', 'CNN-GLOVE', 'MLP-FAST', 'KNN-FAST', 'CNN-FAST', 'CNN-CV', 'KNN-W2V', 'CNN-TFIDF', 'CNN-W2V', 'MLP-CV', 'MLP-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'NB-FAST', 'KNN-CV', 'EXTRA-W2V', 'KNN-GLOVE'] 
#Stacking LR - Recall - ([0.9269999999999999, 6], None)
names['covid19'] = ['SVM-TFIDF', 'NB-TFIDF', 'CNN-GLOVE', 'CNN-W2V', 'MLP-TFIDF', 'EXTRA-TFIDF'] 
#Stacking LR - F1 - ([0.934, 39], None)
names['covid19'] = ['LR-TFIDF', 'LR-CV', 'LR-W2V', 'RF-CV', 'SVM-FAST', 'RF-GLOVE', 'LR-FAST', 'SVM-GLOVE', 'SVM-CV', 'SVM-TFIDF', 'RF-TFIDF', 'MLP-GLOVE', 'RF-W2V', 'MLP-W2V', 'NB-CV', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'SVM-W2V', 'CNN-GLOVE', 'MLP-FAST', 'KNN-FAST', 'CNN-FAST', 'CNN-CV', 'KNN-W2V', 'CNN-TFIDF', 'CNN-W2V', 'MLP-CV', 'MLP-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'NB-FAST', 'KNN-CV', 'EXTRA-W2V', 'KNN-GLOVE'] 
#Stacking RF - Accuracy - ([0.930333333333333, 39], None)
names['covid19'] =  ['LR-TFIDF', 'LR-CV', 'LR-W2V', 'RF-CV', 'SVM-FAST', 'RF-GLOVE', 'LR-FAST', 'SVM-GLOVE', 'SVM-CV', 'SVM-TFIDF', 'RF-TFIDF', 'MLP-GLOVE', 'RF-W2V', 'MLP-W2V', 'NB-CV', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'SVM-W2V', 'CNN-GLOVE', 'MLP-FAST', 'KNN-FAST', 'CNN-FAST', 'CNN-CV', 'KNN-W2V', 'CNN-TFIDF', 'CNN-W2V', 'MLP-CV', 'MLP-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'NB-FAST', 'KNN-CV', 'EXTRA-W2V', 'KNN-GLOVE'] 
#Stacking RF - Precision - ([0.9454399999999998, 25], None)
names['covid19'] = ['LR-CV', 'RF-GLOVE', 'LR-FAST', 'SVM-CV', 'SVM-TFIDF', 'MLP-GLOVE', 'RF-W2V', 'NB-CV', 'NB-TFIDF', 'SVM-W2V', 'CNN-GLOVE', 'MLP-FAST', 'KNN-FAST', 'CNN-FAST', 'CNN-CV', 'CNN-TFIDF', 'CNN-W2V', 'MLP-CV', 'MLP-TFIDF', 'KNN-TFIDF', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'KNN-CV', 'KNN-GLOVE'] 
#Stacking RF - Recall - ([0.9230303030303033, 33], None)
names['covid19'] = ['LR-TFIDF', 'SVM-FAST', 'RF-GLOVE', 'LR-FAST', 'SVM-GLOVE', 'SVM-CV', 'SVM-TFIDF', 'RF-TFIDF', 'MLP-GLOVE', 'RF-W2V', 'MLP-W2V', 'NB-TFIDF', 'RF-FAST', 'NB-W2V', 'SVM-W2V', 'CNN-GLOVE', 'MLP-FAST', 'KNN-FAST', 'CNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-W2V', 'MLP-CV', 'MLP-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'NB-FAST', 'KNN-CV', 'EXTRA-W2V', 'KNN-GLOVE'] 
#Stacking RF - F1 - ([0.9333000000000002, 40], None)
names['covid19'] = ['LR-TFIDF', 'LR-GLOVE', 'LR-CV', 'LR-W2V', 'RF-CV', 'SVM-FAST', 'RF-GLOVE', 'LR-FAST', 'SVM-GLOVE', 'SVM-CV', 'SVM-TFIDF', 'RF-TFIDF', 'MLP-GLOVE', 'RF-W2V', 'MLP-W2V', 'NB-CV', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'SVM-W2V', 'CNN-GLOVE', 'MLP-FAST', 'KNN-FAST', 'CNN-FAST', 'CNN-CV', 'KNN-W2V', 'CNN-TFIDF', 'CNN-W2V', 'MLP-CV', 'MLP-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'NB-FAST', 'KNN-CV', 'EXTRA-W2V', 'KNN-GLOVE'] 
#Stacking NB - Accuracy - ([0.9259999999999999, 5], None)
names['covid19'] = ['SVM-TFIDF', 'NB-TFIDF', 'MLP-FAST', 'CNN-TFIDF', 'EXTRA-CV'] 
#Stacking NB - Precision - ([0.9430000000000005, 35], None)
names['covid19'] = ['LR-TFIDF', 'LR-CV', 'RF-CV', 'RF-GLOVE', 'LR-FAST', 'SVM-GLOVE', 'SVM-CV', 'SVM-TFIDF', 'RF-TFIDF', 'MLP-GLOVE', 'RF-W2V', 'NB-CV', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'SVM-W2V', 'CNN-GLOVE', 'MLP-FAST', 'KNN-FAST', 'CNN-FAST', 'CNN-CV', 'CNN-TFIDF', 'CNN-W2V', 'MLP-CV', 'MLP-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'NB-FAST', 'KNN-CV', 'EXTRA-W2V', 'KNN-GLOVE'] 
#Stacking NB - Recall - ([0.926, 7], None)
names['covid19'] = ['SVM-TFIDF', 'NB-TFIDF', 'CNN-GLOVE', 'MLP-FAST', 'CNN-W2V', 'MLP-TFIDF', 'EXTRA-TFIDF'] 
#Stacking NB - F1 - ([0.929, 5], None)
names['covid19'] = ['SVM-TFIDF', 'NB-TFIDF', 'MLP-FAST', 'CNN-TFIDF', 'EXTRA-CV']

#oracle group D 
#Stacking LR - Accuracy - ([0.5399999999999997, 26], None)
names['fakes'] = ['KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-CV', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'KNN-TFIDF', 'KNN-GLOVE', 'MLP-CV', 'NB-FAST', 'NB-CV', 'RF-CV', 'MLP-W2V', 'SVM-GLOVE', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'RF-TFIDF', 'SVM-CV', 'LR-CV', 'RF-CV'] 
#Stacking LR - Precision - ([0.5370000000000004, 26], None) 
names['fakes'] = ['KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-CV', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'KNN-TFIDF', 'KNN-GLOVE', 'MLP-CV', 'NB-FAST', 'NB-CV', 'RF-CV', 'MLP-W2V', 'SVM-GLOVE', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'RF-TFIDF', 'SVM-CV', 'LR-CV', 'RF-CV'] 

#Stacking LR - Recall - ([0.6300000000000001, 33], None)
names['fakes'] = ['KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-CV', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-W2V', 'EXTRA-FAST', 'EXTRA-GLOVE', 'KNN-GLOVE', 'MLP-CV', 'MLP-TFIDF', 'SVM-FAST', 'NB-CV', 'RF-W2V', 'MLP-GLOVE', 'MLP-W2V', 'SVM-W2V', 'SVM-GLOVE', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'LR-FAST', 'SVM-CV', 'SVM-TFIDF', 'LR-TFIDF', 'RF-CV', 'SVM-FAST'] 
#Stacking LR - F1 - ([0.58, 27], None)
names['fakes'] = ['KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-CV', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-W2V', 'EXTRA-FAST', 'KNN-TFIDF', 'KNN-GLOVE', 'MLP-CV', 'NB-FAST', 'SVM-FAST', 'MLP-GLOVE', 'MLP-W2V', 'SVM-W2V', 'NB-TFIDF', 'RF-FAST', 'NB-W2V', 'LR-FAST', 'SVM-CV', 'LR-TFIDF', 'SVM-FAST'] 

#ajeitar stacking RF que da troncho
#Stacking RF - Accuracy - ([0.5646153846153845, 13], None)
names['fakes'] = ['CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-W2V', 'EXTRA-CV', 'KNN-TFIDF', 'MLP-CV', 'NB-CV', 'SVM-GLOVE', 'NB-GLOVE', 'SVM-CV', 'LR-CV'] 
#Stacking RF - Precision - 0.589636 - ([0.5958181818181818, 11], None)
names['fakes'] = ['CNN-GLOVE', 'KNN-W2V', 'CNN-TFIDF', 'CNN-W2V', 'EXTRA-CV', 'KNN-TFIDF', 'MLP-CV', 'NB-CV', 'SVM-GLOVE', 'SVM-CV', 'LR-CV'] 
#Stacking RF - Recall - ([0.53075, 4], None)
names['fakes'] = ['KNN-FAST', 'CNN-CV', 'MLP-GLOVE', 'SVM-W2V'] 
#Stacking RF - F1 - ([0.5479999999999999, 3], None)
names['fakes'] = ['CNN-CV', 'MLP-GLOVE', 'LR-TFIDF'] 

#Stacking NB - Accuracy - ([0.5450000000000002, 33], None)
names['fakes'] = ['KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-CV', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-W2V', 'EXTRA-FAST', 'KNN-TFIDF', 'KNN-GLOVE', 'MLP-CV', 'MLP-TFIDF', 'SVM-FAST', 'NB-CV', 'RF-W2V', 'MLP-GLOVE', 'MLP-W2V', 'SVM-W2V', 'SVM-GLOVE', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'RF-TFIDF', 'SVM-CV', 'SVM-TFIDF', 'LR-CV', 'RF-CV', 'SVM-FAST'] 
#Stacking NB - Precision - ([0.5450000000000002, 33], None)
names['fakes'] = ['KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-CV', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-W2V', 'EXTRA-FAST', 'KNN-TFIDF', 'KNN-GLOVE', 'MLP-CV', 'MLP-TFIDF', 'SVM-FAST', 'NB-CV', 'RF-W2V', 'MLP-GLOVE', 'MLP-W2V', 'SVM-W2V', 'SVM-GLOVE', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'RF-TFIDF', 'SVM-CV', 'SVM-TFIDF', 'LR-CV', 'RF-CV', 'SVM-FAST'] 
#Stacking NB - Recall - ([0.4939999999999999, 19], None)
names['fakes'] = ['KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-CV', 'CNN-TFIDF', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'EXTRA-GLOVE', 'MLP-TFIDF', 'RF-W2V', 'MLP-GLOVE', 'SVM-W2V', 'NB-TFIDF', 'SVM-FAST', 'LR-TFIDF', 'SVM-FAST'] 
#Stacking NB - F1 - ([0.5229999999999999, 19], None)
names['fakes'] = ['KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-CV', 'CNN-TFIDF', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'KNN-TFIDF', 'MLP-CV', 'NB-CV', 'MLP-GLOVE', 'SVM-W2V', 'NB-TFIDF', 'SVM-FAST', 'LR-TFIDF', 'SVM-FAST']

#oracle group D 
#Stacking LR - Accuracy - 29 grupos - [0.8649999999999995, 29]
names['buzzfeednews'] = ['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'NB-CV', 'RF-FAST', 'NB-W2V', 'RF-W2V', 'NB-TFIDF', 'SVM-CV', 'RF-TFIDF', 'SVM-FAST', 'LR-CV', 'LR-GLOVE', 'RF-GLOVE', 'RF-CV', 'CNN-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-CV', 'EXTRA-GLOVE', 'KNN-GLOVE', 'EXTRA-W2V', 'NB-FAST', 'MLP-CV', 'KNN-CV', 'MLP-TFIDF'] 
#Stacking LR - Precision - ([0.8889999999999997, 37], None)
names['buzzfeednews'] = ['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'MLP-GLOVE', 'NB-CV', 'MLP-W2V', 'RF-FAST', 'NB-W2V', 'RF-W2V', 'NB-TFIDF', 'SVM-W2V', 'SVM-CV', 'SVM-TFIDF', 'SVM-GLOVE', 'RF-TFIDF', 'SVM-FAST', 'LR-CV', 'LR-GLOVE', 'LR-W2V', 'RF-GLOVE', 'LR-FAST', 'RF-CV', 'CNN-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-CV', 'EXTRA-GLOVE', 'KNN-GLOVE', 'EXTRA-W2V', 'EXTRA-FAST', 'NB-FAST', 'MLP-CV', 'KNN-CV', 'MLP-TFIDF'] 
#Stacking LR - Recall - ([0.8420000000000002, 19], None)
names['buzzfeednews'] = ['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'RF-W2V', 'SVM-CV', 'SVM-FAST', 'LR-CV', 'LR-GLOVE', 'RF-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-CV', 'KNN-TFIDF', 'MLP-CV', 'KNN-CV', 'MLP-TFIDF'] 
#Stacking LR - F1 Score - ([0.8649999999999995, 29], None)
names['buzzfeednews'] = ['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'NB-CV', 'RF-FAST', 'NB-W2V', 'RF-W2V', 'NB-TFIDF', 'SVM-CV', 'RF-TFIDF', 'SVM-FAST', 'LR-CV', 'LR-GLOVE', 'RF-GLOVE', 'RF-CV', 'CNN-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-CV', 'KNN-TFIDF', 'KNN-GLOVE', 'EXTRA-W2V', 'NB-FAST', 'MLP-CV', 'KNN-CV', 'MLP-TFIDF'] 

#corrigir a falha do RF que roda mais vezes 
#Stacking RF - Accuracy - ([0.8282799999999999, 25], None)
names['buzzfeednews'] = ['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'NB-CV', 'RF-FAST', 'NB-TFIDF', 'SVM-CV', 'RF-TFIDF', 'SVM-FAST', 'LR-CV', 'LR-GLOVE', 'RF-GLOVE', 'RF-CV', 'CNN-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-CV', 'EXTRA-GLOVE', 'NB-FAST', 'MLP-CV', 'KNN-CV', 'MLP-TFIDF'] 
#Stacking RF - Precision - ([0.8487599999999997, 25], None)
names['buzzfeednews'] = ['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'NB-CV', 'RF-FAST', 'NB-TFIDF', 'SVM-CV', 'RF-TFIDF', 'SVM-FAST', 'LR-CV', 'LR-GLOVE', 'RF-GLOVE', 'RF-CV', 'CNN-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-CV', 'EXTRA-GLOVE', 'NB-FAST', 'MLP-CV', 'KNN-CV', 'MLP-TFIDF'] 
#Stacking RF - Recall - ([0.7889999999999998, 14], None)
names['buzzfeednews'] =['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'SVM-CV', 'LR-CV', 'LR-GLOVE', 'RF-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-CV', 'KNN-CV', 'MLP-TFIDF'] 
#Stacking RF - F1-Score - ([0.8257272727272725, 22], None)
names['buzzfeednews'] =['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'NB-CV', 'SVM-CV', 'RF-TFIDF', 'SVM-FAST', 'LR-CV', 'LR-GLOVE', 'RF-CV', 'CNN-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-CV', 'KNN-TFIDF', 'NB-FAST', 'MLP-CV', 'KNN-CV', 'MLP-TFIDF'] 

#Stacking NB - Accuracy - ([0.784, 4], None)
names['buzzfeednews'] = ['EXTRA-TFIDF', 'CNN-FAST', 'NB-TFIDF', 'MLP-TFIDF'] 
#Stacking NB - Precision - ([0.75, 24], None) 
names['buzzfeednews'] = ['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'NB-CV', 'RF-FAST', 'NB-TFIDF', 'RF-TFIDF', 'SVM-FAST', 'LR-CV', 'LR-GLOVE', 'RF-GLOVE', 'RF-CV', 'CNN-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-CV', 'EXTRA-GLOVE', 'NB-FAST', 'MLP-CV', 'KNN-CV', 'MLP-TFIDF'] 
#Stacking NB - Recall - ([0.842, 1], None)
names['buzzfeednews'] = ['SVM-CV'] 
#Stacking NB - F1-Score - ([0.78, 1], None)
names['buzzfeednews'] = ['SVM-CV']

#oracle group C 
clfs = ['SVM-CV', 'SVM-TFIDF', 'SVM-W2V', 'SVM-GLOVE', 'SVM-FAST',
        'KNN-CV', 'KNN-TFIDF','KNN-W2V', 'KNN-GLOVE', 'KNN-FAST',
        'MLP-CV','MLP-TFIDF','MLP-W2V','MLP-GLOVE','MLP-FAST',
        'NB-CV','NB-TFIDF','NB-W2V','NB-GLOVE','NB-FAST',
        'EXTRA-CV','EXTRA-TFIDF','EXTRA-W2V','EXTRA-GLOVE','EXTRA-FAST',
        'RF-CV','RF-TFIDF','RF-W2V','RF-GLOVE','RF-FAST',
        'LR-CV','LR-TFIDF','LR-W2V','LR-GLOVE','LR-FAST',
        'CNN-CV','CNN-TFIDF','CNN-W2V','CNN-GLOVE','CNN-FAST']

#oracle group D - ACHO QUE ESSE FOI DO DATASET COVID usando o Note do Plot Kaggle Revisando 
#Stacking LR - Accuracy - 21 grupos - ([0.9890000000000004, 21], None)
names['kaggle'] = ['MLP-GLOVE', 'RF-W2V', 'SVM-W2V', 'CNN-TFIDF', 'CNN-CV', 'EXTRA-FAST', 'LR-CV', 'NB-CV', 'SVM-TFIDF', 'LR-FAST', 'CNN-FAST', 'MLP-FAST', 'CNN-GLOVE', 'KNN-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'MLP-TFIDF', 'KNN-GLOVE', 'KNN-CV', 'MLP-CV', 'MLP-TFIDF'] 
#Stacking RF - Accuracy - 16 grupos - ([0.9892727272727274, 22], None)
names['kaggle'] = ['MLP-GLOVE', 'RF-W2V', 'SVM-W2V', 'SVM-GLOVE', 'CNN-TFIDF', 'CNN-CV', 'EXTRA-FAST', 'LR-CV', 'NB-CV', 'SVM-TFIDF', 'LR-FAST', 'CNN-FAST', 'MLP-FAST', 'CNN-GLOVE', 'KNN-FAST', 'EXTRA-CV', 'MLP-TFIDF', 'EXTRA-W2V', 'KNN-GLOVE', 'KNN-CV', 'MLP-CV', 'MLP-TFIDF'] 
#Stacking NB - Accuracy - 15 grupos - ([0.9890000000000003, 15], None)
names['kaggle'] = ['MLP-GLOVE', 'RF-W2V', 'SVM-W2V', 'CNN-TFIDF', 'SVM-TFIDF', 'CNN-FAST', 'MLP-FAST', 'CNN-GLOVE', 'KNN-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-W2V', 'KNN-GLOVE', 'MLP-CV', 'MLP-TFIDF']

"""# Calculando Oracles dos Datasets

## Liar 2
"""

#verificar o path p/load_predictions e o dataset

#oracle group A
names = {}
names['MLP'] = ['MLP-FAST','MLP-GLOVE','MLP-CV','MLP-TFIDF','MLP-W2V']#,'MLP-BERT']
names['KNN'] = ['KNN-FAST','KNN-GLOVE','KNN-CV','KNN-TFIDF','KNN-W2V']#,'KNN-BERT']
names['EXTRA'] = ['EXTRA-FAST','EXTRA-GLOVE','EXTRA-CV','EXTRA-TFIDF','EXTRA-W2V']#,'EXTRA-BERT']
names['RF'] = ['RF-FAST','RF-GLOVE','RF-CV','RF-TFIDF','RF-W2V']#,'RF-BERT']
names['SVM'] = ['SVM-FAST','SVM-GLOVE','SVM-CV','SVM-TFIDF','SVM-W2V']#,'SVM-BERT']
names['LR'] = ['LR-FAST','LR-GLOVE','LR-CV','LR-TFIDF','LR-W2V']#,'LR-BERT']
names['NB'] = ['NB-FAST','NB-GLOVE','NB-CV','NB-TFIDF','NB-W2V']#,'NB-BERT']
names['CNN'] = ['CNN-FAST','CNN-GLOVE','CNN-CV','CNN-TFIDF','CNN-W2V']#,'CNN-BERT']
for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = accuracy_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} accuracy score: {score}")

#oracle group B 
names = {}
names['fast'] = ['MLP-FAST','KNN-FAST','EXTRA-FAST','RF-FAST','SVM-FAST','LR-FAST','NB-FAST','CNN-FAST']
names['glove'] = ['MLP-GLOVE','KNN-GLOVE','EXTRA-GLOVE','RF-GLOVE','SVM-GLOVE','LR-GLOVE','NB-GLOVE','CNN-GLOVE']
names['cv'] = ['MLP-CV','KNN-CV','EXTRA-CV','RF-CV','SVM-CV','LR-CV','NB-CV','CNN-CV']
names['tfidf'] = ['MLP-TFIDF','KNN-TFIDF','EXTRA-TFIDF','RF-TFIDF','SVM-TFIDF','LR-TFIDF','NB-TFIDF','CNN-TFIDF']
names['w2v'] = ['MLP-W2V','KNN-W2V','EXTRA-W2V','RF-W2V','SVM-W2V','LR-W2V','NB-W2V','NB-W2V']
names['bert'] = ['MLP-BERT','KNN-BERT','EXTRA-BERT','RF-BERT','SVM-BERT','LR-BERT','NB-BERT','NB-BERT']
                
for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = accuracy_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} accuracy score: {score}")

#norm = Normalizer()
#X, y = make_classification()
#X_norm = norm.fit_transform(X)
#X_norm

#LR - Accuracy
names = {}
dataset_name = 'liar' #liar 2
#Stacking LR - Accuracy - ([0.6090000000000004, 36], None)
names['liar'] = ['CNN-CV', 'KNN-W2V', 'KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'KNN-GLOVE', 'KNN-CV', 'EXTRA-W2V', 'RF-GLOVE', 'SVM-TFIDF', 'RF-TFIDF', 'LR-TFIDF', 'LR-GLOVE', 'RF-CV', 'SVM-FAST', 'EXTRA-FAST', 'NB-FAST', 'MLP-CV', 'MLP-TFIDF', 'NB-GLOVE', 'SVM-W2V', 'SVM-GLOVE', 'SVM-CV', 'MLP-GLOVE', 'NB-CV', 'NB-W2V', 'NB-TFIDF', 'RF-W2V', 'RF-FAST'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking LR obtained for a metric accuracy a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')

#RF - Accuracy
names = {}
dataset_name = 'liar' #liar 2
#Stacking RF - Accuracy - ([0.6495238095238095, 21], None)
names['liar'] = ['KNN-W2V', 'CNN-GLOVE', 'CNN-FAST', 'CNN-W2V', 'EXTRA-CV', 'EXTRA-TFIDF', 'KNN-TFIDF', 'EXTRA-W2V', 'RF-GLOVE', 'RF-TFIDF', 'LR-TFIDF', 'SVM-FAST', 'EXTRA-FAST', 'NB-FAST', 'MLP-CV', 'MLP-TFIDF', 'SVM-W2V', 'SVM-GLOVE', 'MLP-GLOVE', 'NB-TFIDF', 'RF-W2V'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking RF obtained for a metric accuracy a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')

#NB - Accuracy 
names = {}
dataset_name = 'liar' #liar 2
#Stacking NB - Accuracy - ([0.663, 3], None)
names['liar'] = ['CNN-GLOVE', 'LR-TFIDF', 'SVM-W2V'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking NB obtained for a metric accuracy a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')

names = {}
dataset_name = 'liar' 
#oracle group C
names['clfs'] =  ['SVM-CV', 'SVM-TFIDF', 'SVM-W2V', 'SVM-GLOVE', 'SVM-FAST','KNN-CV', 'KNN-TFIDF','KNN-W2V', 'KNN-GLOVE', 'KNN-FAST',
        'MLP-CV','MLP-TFIDF','MLP-W2V','MLP-GLOVE','MLP-FAST','NB-CV','NB-TFIDF','NB-W2V','NB-GLOVE','NB-FAST',
        'EXTRA-CV','EXTRA-TFIDF','EXTRA-W2V','EXTRA-GLOVE','EXTRA-FAST','RF-CV','RF-TFIDF','RF-W2V','RF-GLOVE','RF-FAST',
        'LR-CV','LR-TFIDF','LR-W2V','LR-GLOVE','LR-FAST','CNN-CV','CNN-TFIDF','CNN-W2V','CNN-GLOVE','CNN-FAST']

for name in ['clfs']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    acc_score = accuracy_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} accuracy score: {acc_score}")
    pre_score = precision_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} precision score: {pre_score}")
    rec_score = recall_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} recall score: {rec_score}")
#    f1_score = f1_score(label.to_numpy(), oracle_preds)#, average='macro')
#    print(f"{name} f1 score: {f1_score}")

"""## Liar 6"""

#ajeitar o path p/ load_predictions e o dataset

#oracle group A
names = {}
names['MLP'] = ['MLP-FAST','MLP-GLOVE','MLP-CV','MLP-TFIDF','MLP-W2V']#,'MLP-BERT']
names['KNN'] = ['KNN-FAST','KNN-GLOVE','KNN-CV','KNN-TFIDF','KNN-W2V']#,'KNN-BERT']
names['EXTRA'] = ['EXTRA-FAST','EXTRA-GLOVE','EXTRA-CV','EXTRA-TFIDF','EXTRA-W2V']#,'EXTRA-BERT']
names['RF'] = ['RF-FAST','RF-GLOVE','RF-CV','RF-TFIDF','RF-W2V']#,'RF-BERT']
names['SVM'] = ['SVM-FAST','SVM-GLOVE','SVM-CV','SVM-TFIDF','SVM-W2V']#,'SVM-BERT']
names['LR'] = ['LR-FAST','LR-GLOVE','LR-CV','LR-TFIDF','LR-W2V']#,'LR-BERT']
names['NB'] = ['NB-FAST','NB-GLOVE','NB-CV','NB-TFIDF','NB-W2V']#,'NB-BERT']
names['CNN'] = ['CNN-FAST','CNN-GLOVE','CNN-CV','CNN-TFIDF','CNN-W2V']#,'CNN-BERT']
for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = accuracy_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} accuracy score: {score}")

#oracle group B 
names = {}
names['fast'] = ['MLP-FAST','KNN-FAST','EXTRA-FAST','RF-FAST','SVM-FAST','LR-FAST','NB-FAST','CNN-FAST']
names['glove'] = ['MLP-GLOVE','KNN-GLOVE','EXTRA-GLOVE','RF-GLOVE','SVM-GLOVE','LR-GLOVE','NB-GLOVE','CNN-GLOVE']
names['cv'] = ['MLP-CV','KNN-CV','EXTRA-CV','RF-CV','SVM-CV','LR-CV','NB-CV','CNN-CV']
names['tfidf'] = ['MLP-TFIDF','KNN-TFIDF','EXTRA-TFIDF','RF-TFIDF','SVM-TFIDF','LR-TFIDF','NB-TFIDF','CNN-TFIDF']
names['w2v'] = ['MLP-W2V','KNN-W2V','EXTRA-W2V','RF-W2V','SVM-W2V','LR-W2V','NB-W2V','NB-W2V']
names['bert'] = ['MLP-BERT','KNN-BERT','EXTRA-BERT','RF-BERT','SVM-BERT','LR-BERT','NB-BERT','NB-BERT']
                
for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = accuracy_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} accuracy score: {score}")

#LR - Accuracy
names = {}
dataset_name = 'liar' #liar 6
#Stacking LR - Accuracy - ([0.6090000000000004, 36], None)
names['liar'] = names['liar'] = ['KNN-W2V', 'CNN-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'MLP-TFIDF', 'NB-TFIDF', 'MLP-W2V', 'LR-W2V', 'SVM-FAST', 'RF-TFIDF', 'SVM-W2V'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking LR obtained for a metric accuracy a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')

#RF - Accuracy
names = {}
dataset_name = 'liar' #liar 6
#Stacking RF - Accuracy - ([0.6495238095238095, 21], None)
names['liar'] = names['liar'] = ['KNN-W2V', 'CNN-GLOVE', 'CNN-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'KNN-GLOVE', 'EXTRA-FAST', 'MLP-TFIDF', 'NB-TFIDF', 'MLP-W2V', 'NB-CV', 'LR-W2V', 'SVM-FAST', 'RF-TFIDF', 'SVM-TFIDF', 'SVM-W2V']
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking RF obtained for a metric accuracy a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')

#NB - Accuracy 
names = {}
dataset_name = 'liar' #liar 6
#Stacking NB - Accuracy - ([0.663, 3], None)
names['liar'] = ['CNN-FAST', 'EXTRA-CV', 'MLP-W2V', 'LR-W2V', 'RF-TFIDF'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking NB obtained for a metric accuracy a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')

names = {}
dataset_name = 'liar' 
#oracle group C
names['clfs'] =  ['SVM-CV', 'SVM-TFIDF', 'SVM-W2V', 'SVM-GLOVE', 'SVM-FAST','KNN-CV', 'KNN-TFIDF','KNN-W2V', 'KNN-GLOVE', 'KNN-FAST',
        'MLP-CV','MLP-TFIDF','MLP-W2V','MLP-GLOVE','MLP-FAST','NB-CV','NB-TFIDF','NB-W2V','NB-GLOVE','NB-FAST',
        'EXTRA-CV','EXTRA-TFIDF','EXTRA-W2V','EXTRA-GLOVE','EXTRA-FAST','RF-CV','RF-TFIDF','RF-W2V','RF-GLOVE','RF-FAST',
        'LR-CV','LR-TFIDF','LR-W2V','LR-GLOVE','LR-FAST','CNN-CV','CNN-TFIDF','CNN-W2V','CNN-GLOVE','CNN-FAST']

for name in ['clfs']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    acc_score = accuracy_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} accuracy score: {acc_score}")
    pre_score = precision_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} precision score: {pre_score}")
    rec_score = recall_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} recall score: {rec_score}")
#    f1_score = f1_score(label.to_numpy(), oracle_preds)#, average='macro')
#    print(f"{name} f1 score: {f1_score}")

"""## Covid """

#ajeitar o path p/load_predictions e o dataset
#oracle group A
names = {}
names['MLP'] = ['MLP-FAST','MLP-GLOVE','MLP-CV','MLP-TFIDF','MLP-W2V']#,'MLP-BERT']
names['KNN'] = ['KNN-FAST','KNN-GLOVE','KNN-CV','KNN-TFIDF','KNN-W2V']#,'KNN-BERT']
names['EXTRA'] = ['EXTRA-FAST','EXTRA-GLOVE','EXTRA-CV','EXTRA-TFIDF','EXTRA-W2V']#,'EXTRA-BERT']
names['RF'] = ['RF-FAST','RF-GLOVE','RF-CV','RF-TFIDF','RF-W2V']#,'RF-BERT']
names['SVM'] = ['SVM-FAST','SVM-GLOVE','SVM-CV','SVM-TFIDF','SVM-W2V']#,'SVM-BERT']
names['LR'] = ['LR-FAST','LR-GLOVE','LR-CV','LR-TFIDF','LR-W2V']#,'LR-BERT']
names['NB'] = ['NB-FAST','NB-GLOVE','NB-CV','NB-TFIDF','NB-W2V']#,'NB-BERT']
names['CNN'] = ['CNN-FAST','CNN-GLOVE','CNN-CV','CNN-TFIDF','CNN-W2V']#,'CNN-BERT']

for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = accuracy_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} accuracy score: {score}")

for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = precision_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} precision score: {score}")

for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = recall_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} recall score: {score}")

for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = f1_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} f1 score: {score}")

#oracle group B 
names = {}
names['fast'] = ['MLP-FAST','KNN-FAST','EXTRA-FAST','RF-FAST','SVM-FAST','LR-FAST','NB-FAST','CNN-FAST']
names['glove'] = ['MLP-GLOVE','KNN-GLOVE','EXTRA-GLOVE','RF-GLOVE','SVM-GLOVE','LR-GLOVE','NB-GLOVE','CNN-GLOVE']
names['cv'] = ['MLP-CV','KNN-CV','EXTRA-CV','RF-CV','SVM-CV','LR-CV','NB-CV','CNN-CV']
names['tfidf'] = ['MLP-TFIDF','KNN-TFIDF','EXTRA-TFIDF','RF-TFIDF','SVM-TFIDF','LR-TFIDF','NB-TFIDF','CNN-TFIDF']
names['w2v'] = ['MLP-W2V','KNN-W2V','EXTRA-W2V','RF-W2V','SVM-W2V','LR-W2V','NB-W2V','NB-W2V']
names['bert'] = ['MLP-BERT','KNN-BERT','EXTRA-BERT','RF-BERT','SVM-BERT','LR-BERT','NB-BERT','NB-BERT']

for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = precision_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} precision score: {score}")

for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = recall_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} recall score: {score}")

for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = f1_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} f1 score: {score}")

# Accuracy
#LR
names = {}
dataset_name = 'covid19' 
names['covid19'] = ['LR-TFIDF', 'LR-CV', 'LR-W2V', 'RF-CV', 'SVM-FAST', 'RF-GLOVE', 'LR-FAST', 'SVM-GLOVE', 'SVM-CV', 'SVM-TFIDF', 'RF-TFIDF', 'MLP-GLOVE', 'RF-W2V', 'MLP-W2V', 'NB-CV', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'SVM-W2V', 'CNN-GLOVE', 'MLP-FAST', 'KNN-FAST', 'CNN-FAST', 'CNN-CV', 'KNN-W2V', 'CNN-TFIDF', 'CNN-W2V', 'MLP-CV', 'MLP-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'NB-FAST', 'KNN-CV', 'EXTRA-W2V', 'KNN-GLOVE'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking LR obtained for a metric accuracy a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#RF 
names = {}
names['covid19'] =  ['LR-TFIDF', 'LR-CV', 'LR-W2V', 'RF-CV', 'SVM-FAST', 'RF-GLOVE', 'LR-FAST', 'SVM-GLOVE', 'SVM-CV', 'SVM-TFIDF', 'RF-TFIDF', 'MLP-GLOVE', 'RF-W2V', 'MLP-W2V', 'NB-CV', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'SVM-W2V', 'CNN-GLOVE', 'MLP-FAST', 'KNN-FAST', 'CNN-FAST', 'CNN-CV', 'KNN-W2V', 'CNN-TFIDF', 'CNN-W2V', 'MLP-CV', 'MLP-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'NB-FAST', 'KNN-CV', 'EXTRA-W2V', 'KNN-GLOVE'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking RF obtained for a metric accuracy a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#NB
names = {}
names['covid19'] = ['SVM-TFIDF', 'NB-TFIDF', 'MLP-FAST', 'CNN-TFIDF', 'EXTRA-CV'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking NB obtained for a metric accuracy a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')

#Precision
#LR
names = {}
dataset_name = 'covid19' 
names['covid19'] = ['LR-TFIDF', 'LR-GLOVE', 'LR-CV', 'LR-W2V', 'RF-CV', 'SVM-FAST', 'RF-GLOVE', 'LR-FAST', 'SVM-GLOVE', 'SVM-CV', 'SVM-TFIDF', 'RF-TFIDF', 'MLP-GLOVE', 'RF-W2V', 'MLP-W2V', 'NB-CV', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'SVM-W2V', 'CNN-GLOVE', 'MLP-FAST', 'KNN-FAST', 'CNN-FAST', 'CNN-CV', 'KNN-W2V', 'CNN-TFIDF', 'CNN-W2V', 'MLP-CV', 'MLP-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'NB-FAST', 'KNN-CV', 'EXTRA-W2V', 'KNN-GLOVE'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking LR obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#RF 
names = {}
names['covid19'] = ['LR-CV', 'RF-GLOVE', 'LR-FAST', 'SVM-CV', 'SVM-TFIDF', 'MLP-GLOVE', 'RF-W2V', 'NB-CV', 'NB-TFIDF', 'SVM-W2V', 'CNN-GLOVE', 'MLP-FAST', 'KNN-FAST', 'CNN-FAST', 'CNN-CV', 'CNN-TFIDF', 'CNN-W2V', 'MLP-CV', 'MLP-TFIDF', 'KNN-TFIDF', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'KNN-CV', 'KNN-GLOVE'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking RF obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#NB  
names = {}
names['covid19'] = ['LR-TFIDF', 'LR-CV', 'RF-CV', 'RF-GLOVE', 'LR-FAST', 'SVM-GLOVE', 'SVM-CV', 'SVM-TFIDF', 'RF-TFIDF', 'MLP-GLOVE', 'RF-W2V', 'NB-CV', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'SVM-W2V', 'CNN-GLOVE', 'MLP-FAST', 'KNN-FAST', 'CNN-FAST', 'CNN-CV', 'CNN-TFIDF', 'CNN-W2V', 'MLP-CV', 'MLP-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'NB-FAST', 'KNN-CV', 'EXTRA-W2V', 'KNN-GLOVE'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking NB obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')

#Recall
#LR
names = {}
dataset_name = 'covid19' 
names['covid19'] = ['SVM-TFIDF', 'NB-TFIDF', 'CNN-GLOVE', 'CNN-W2V', 'MLP-TFIDF', 'EXTRA-TFIDF'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking LR obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#RF 
names = {}
names['covid19'] = ['LR-TFIDF', 'SVM-FAST', 'RF-GLOVE', 'LR-FAST', 'SVM-GLOVE', 'SVM-CV', 'SVM-TFIDF', 'RF-TFIDF', 'MLP-GLOVE', 'RF-W2V', 'MLP-W2V', 'NB-TFIDF', 'RF-FAST', 'NB-W2V', 'SVM-W2V', 'CNN-GLOVE', 'MLP-FAST', 'KNN-FAST', 'CNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-W2V', 'MLP-CV', 'MLP-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'NB-FAST', 'KNN-CV', 'EXTRA-W2V', 'KNN-GLOVE'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking RF obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#NB  
names = {}
names['covid19'] = ['SVM-TFIDF', 'NB-TFIDF', 'CNN-GLOVE', 'MLP-FAST', 'CNN-W2V', 'MLP-TFIDF', 'EXTRA-TFIDF'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking NB obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')

#F1
#LR
names = {}
dataset_name = 'covid19' 
names['covid19'] = ['LR-TFIDF', 'LR-CV', 'LR-W2V', 'RF-CV', 'SVM-FAST', 'RF-GLOVE', 'LR-FAST', 'SVM-GLOVE', 'SVM-CV', 'SVM-TFIDF', 'RF-TFIDF', 'MLP-GLOVE', 'RF-W2V', 'MLP-W2V', 'NB-CV', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'SVM-W2V', 'CNN-GLOVE', 'MLP-FAST', 'KNN-FAST', 'CNN-FAST', 'CNN-CV', 'KNN-W2V', 'CNN-TFIDF', 'CNN-W2V', 'MLP-CV', 'MLP-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'NB-FAST', 'KNN-CV', 'EXTRA-W2V', 'KNN-GLOVE'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking LR obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#RF 
names = {}
names['covid19'] = ['LR-TFIDF', 'LR-GLOVE', 'LR-CV', 'LR-W2V', 'RF-CV', 'SVM-FAST', 'RF-GLOVE', 'LR-FAST', 'SVM-GLOVE', 'SVM-CV', 'SVM-TFIDF', 'RF-TFIDF', 'MLP-GLOVE', 'RF-W2V', 'MLP-W2V', 'NB-CV', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'SVM-W2V', 'CNN-GLOVE', 'MLP-FAST', 'KNN-FAST', 'CNN-FAST', 'CNN-CV', 'KNN-W2V', 'CNN-TFIDF', 'CNN-W2V', 'MLP-CV', 'MLP-TFIDF', 'EXTRA-GLOVE', 'KNN-TFIDF', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'NB-FAST', 'KNN-CV', 'EXTRA-W2V', 'KNN-GLOVE'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking RF obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#NB  
names = {}
names['covid19'] = ['SVM-TFIDF', 'NB-TFIDF', 'MLP-FAST', 'CNN-TFIDF', 'EXTRA-CV'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking NB obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')

names = {}
dataset_name = 'covid19' 
#oracle group C
names['clfs'] =  ['SVM-CV', 'SVM-TFIDF', 'SVM-W2V', 'SVM-GLOVE', 'SVM-FAST','KNN-CV', 'KNN-TFIDF','KNN-W2V', 'KNN-GLOVE', 'KNN-FAST',
        'MLP-CV','MLP-TFIDF','MLP-W2V','MLP-GLOVE','MLP-FAST','NB-CV','NB-TFIDF','NB-W2V','NB-GLOVE','NB-FAST',
        'EXTRA-CV','EXTRA-TFIDF','EXTRA-W2V','EXTRA-GLOVE','EXTRA-FAST','RF-CV','RF-TFIDF','RF-W2V','RF-GLOVE','RF-FAST',
        'LR-CV','LR-TFIDF','LR-W2V','LR-GLOVE','LR-FAST','CNN-CV','CNN-TFIDF','CNN-W2V','CNN-GLOVE','CNN-FAST']

for name in ['clfs']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    acc_score = accuracy_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} accuracy score: {acc_score}")
    pre_score = precision_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} precision score: {pre_score}")
    rec_score = recall_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} recall score: {rec_score}")
#    f1_score = f1_score(label.to_numpy(), oracle_preds)#, average='macro')
#    print(f"{name} f1 score: {f1_score}")

"""##FAKES"""

#ajeitar o path p/load_predictions e o dataset
#oracle group A
names = {}
names['MLP'] = ['MLP-FAST','MLP-GLOVE','MLP-CV','MLP-TFIDF','MLP-W2V']#,'MLP-BERT']
names['KNN'] = ['KNN-FAST','KNN-GLOVE','KNN-CV','KNN-TFIDF','KNN-W2V']#,'KNN-BERT']
names['EXTRA'] = ['EXTRA-FAST','EXTRA-GLOVE','EXTRA-CV','EXTRA-TFIDF','EXTRA-W2V']#,'EXTRA-BERT']
names['RF'] = ['RF-FAST','RF-GLOVE','RF-CV','RF-TFIDF','RF-W2V']#,'RF-BERT']
names['SVM'] = ['SVM-FAST','SVM-GLOVE','SVM-CV','SVM-TFIDF','SVM-W2V']#,'SVM-BERT']
names['LR'] = ['LR-FAST','LR-GLOVE','LR-CV','LR-TFIDF','LR-W2V']#,'LR-BERT']
names['NB'] = ['NB-FAST','NB-GLOVE','NB-CV','NB-TFIDF','NB-W2V']#,'NB-BERT']
names['CNN'] = ['CNN-FAST','CNN-GLOVE','CNN-CV','CNN-TFIDF','CNN-W2V']#,'CNN-BERT']

#ajeitar o path p/load_predictions e o dataset
for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = accuracy_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} accuracy score: {score}")

for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = precision_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} precision score: {score}")

for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = recall_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} recall score: {score}")

for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = f1_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} f1 score: {score}")

#oracle group B 
names = {}
names['fast'] = ['MLP-FAST','KNN-FAST','EXTRA-FAST','RF-FAST','SVM-FAST','LR-FAST','NB-FAST','CNN-FAST']
names['glove'] = ['MLP-GLOVE','KNN-GLOVE','EXTRA-GLOVE','RF-GLOVE','SVM-GLOVE','LR-GLOVE','NB-GLOVE','CNN-GLOVE']
names['cv'] = ['MLP-CV','KNN-CV','EXTRA-CV','RF-CV','SVM-CV','LR-CV','NB-CV','CNN-CV']
names['tfidf'] = ['MLP-TFIDF','KNN-TFIDF','EXTRA-TFIDF','RF-TFIDF','SVM-TFIDF','LR-TFIDF','NB-TFIDF','CNN-TFIDF']
names['w2v'] = ['MLP-W2V','KNN-W2V','EXTRA-W2V','RF-W2V','SVM-W2V','LR-W2V','NB-W2V','NB-W2V']
names['bert'] = ['MLP-BERT','KNN-BERT','EXTRA-BERT','RF-BERT','SVM-BERT','LR-BERT','NB-BERT','NB-BERT']

for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = accuracy_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} accuracy score: {score}")

for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = precision_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} precision score: {score}")

for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = recall_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} recall score: {score}")

for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = f1_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} f1 score: {score}")

#Accuracy
#LR
names = {}
dataset_name = 'fakes' 
names['fakes'] = ['KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-CV', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'KNN-TFIDF', 'KNN-GLOVE', 'MLP-CV', 'NB-FAST', 'NB-CV', 'RF-CV', 'MLP-W2V', 'SVM-GLOVE', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'RF-TFIDF', 'SVM-CV', 'LR-CV', 'RF-CV'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking LR obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#RF 
names = {}
names['fakes'] = ['CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-W2V', 'EXTRA-CV', 'KNN-TFIDF', 'MLP-CV', 'NB-CV', 'SVM-GLOVE', 'NB-GLOVE', 'SVM-CV', 'LR-CV'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking RF obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#NB  
names = {}
names['fakes'] = ['KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-CV', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-W2V', 'EXTRA-FAST', 'KNN-TFIDF', 'KNN-GLOVE', 'MLP-CV', 'MLP-TFIDF', 'SVM-FAST', 'NB-CV', 'RF-W2V', 'MLP-GLOVE', 'MLP-W2V', 'SVM-W2V', 'SVM-GLOVE', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'RF-TFIDF', 'SVM-CV', 'SVM-TFIDF', 'LR-CV', 'RF-CV', 'SVM-FAST'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking NB obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
print('accuracy ok')
#Precision
#LR
names = {}
dataset_name = 'fakes' 
names['fakes'] = ['KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-CV', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'KNN-TFIDF', 'KNN-GLOVE', 'MLP-CV', 'NB-FAST', 'NB-CV', 'RF-CV', 'MLP-W2V', 'SVM-GLOVE', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'RF-TFIDF', 'SVM-CV', 'LR-CV', 'RF-CV'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking LR obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#RF 
names = {}
names['fakes'] = ['CNN-GLOVE', 'KNN-W2V', 'CNN-TFIDF', 'CNN-W2V', 'EXTRA-CV', 'KNN-TFIDF', 'MLP-CV', 'NB-CV', 'SVM-GLOVE', 'SVM-CV', 'LR-CV'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking RF obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#NB  
names = {}
names['fakes'] = ['KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-CV', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-W2V', 'EXTRA-FAST', 'KNN-TFIDF', 'KNN-GLOVE', 'MLP-CV', 'MLP-TFIDF', 'SVM-FAST', 'NB-CV', 'RF-W2V', 'MLP-GLOVE', 'MLP-W2V', 'SVM-W2V', 'SVM-GLOVE', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'RF-TFIDF', 'SVM-CV', 'SVM-TFIDF', 'LR-CV', 'RF-CV', 'SVM-FAST'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking NB obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
print('precision ok')
#Recall
#LR
names = {}
dataset_name = 'fakes' 
names['fakes'] = ['KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-CV', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-W2V', 'EXTRA-FAST', 'EXTRA-GLOVE', 'KNN-GLOVE', 'MLP-CV', 'MLP-TFIDF', 'SVM-FAST', 'NB-CV', 'RF-W2V', 'MLP-GLOVE', 'MLP-W2V', 'SVM-W2V', 'SVM-GLOVE', 'NB-TFIDF', 'NB-GLOVE', 'RF-FAST', 'NB-W2V', 'LR-FAST', 'SVM-CV', 'SVM-TFIDF', 'LR-TFIDF', 'RF-CV', 'SVM-FAST'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking LR obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#RF 
names = {}
names['fakes'] = ['KNN-FAST', 'CNN-CV', 'MLP-GLOVE', 'SVM-W2V'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking RF obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#NB  
names = {}
names['fakes'] = ['KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-CV', 'CNN-TFIDF', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'EXTRA-GLOVE', 'MLP-TFIDF', 'RF-W2V', 'MLP-GLOVE', 'SVM-W2V', 'NB-TFIDF', 'SVM-FAST', 'LR-TFIDF', 'SVM-FAST'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking NB obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
print('recall ok')
#F1
#LR
names = {}
dataset_name = 'fakes' 
names['fakes'] = ['KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-CV', 'CNN-TFIDF', 'CNN-W2V', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-W2V', 'EXTRA-FAST', 'KNN-TFIDF', 'KNN-GLOVE', 'MLP-CV', 'NB-FAST', 'SVM-FAST', 'MLP-GLOVE', 'MLP-W2V', 'SVM-W2V', 'NB-TFIDF', 'RF-FAST', 'NB-W2V', 'LR-FAST', 'SVM-CV', 'LR-TFIDF', 'SVM-FAST'] 

label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking LR obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#RF 
names = {}
names['fakes'] =['CNN-CV', 'MLP-GLOVE', 'LR-TFIDF'] 
 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking RF obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#NB  
names = {}
names['fakes'] = ['KNN-FAST', 'CNN-GLOVE', 'CNN-FAST', 'KNN-W2V', 'CNN-CV', 'CNN-TFIDF', 'MLP-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-FAST', 'KNN-TFIDF', 'MLP-CV', 'NB-CV', 'MLP-GLOVE', 'SVM-W2V', 'NB-TFIDF', 'SVM-FAST', 'LR-TFIDF', 'SVM-FAST'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking NB obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
print('f1 ok')

names = {}
dataset_name = 'fakes' 
#oracle group C
names['clfs'] =  ['SVM-CV', 'SVM-TFIDF', 'SVM-W2V', 'SVM-GLOVE', 'SVM-FAST','KNN-CV', 'KNN-TFIDF','KNN-W2V', 'KNN-GLOVE', 'KNN-FAST',
        'MLP-CV','MLP-TFIDF','MLP-W2V','MLP-GLOVE','MLP-FAST','NB-CV','NB-TFIDF','NB-W2V','NB-GLOVE','NB-FAST',
        'EXTRA-CV','EXTRA-TFIDF','EXTRA-W2V','EXTRA-GLOVE','EXTRA-FAST','RF-CV','RF-TFIDF','RF-W2V','RF-GLOVE','RF-FAST',
        'LR-CV','LR-TFIDF','LR-W2V','LR-GLOVE','LR-FAST','CNN-CV','CNN-TFIDF','CNN-W2V','CNN-GLOVE','CNN-FAST']

for name in ['clfs']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    acc_score = accuracy_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} accuracy score: {acc_score}")
    pre_score = precision_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} precision score: {pre_score}")
    rec_score = recall_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} recall score: {rec_score}")
#    f1_score = f1_score(label.to_numpy(), oracle_preds)#, average='macro')
#    print(f"{name} f1 score: {f1_score}")

"""## BUZZFEEDNEWS"""

#ajeitar o path p/load_predictions e o dataset
#oracle group A
names = {}
names['MLP'] = ['MLP-FAST','MLP-GLOVE','MLP-CV','MLP-TFIDF','MLP-W2V']#,'MLP-BERT']
names['KNN'] = ['KNN-FAST','KNN-GLOVE','KNN-CV','KNN-TFIDF','KNN-W2V']#,'KNN-BERT']
names['EXTRA'] = ['EXTRA-FAST','EXTRA-GLOVE','EXTRA-CV','EXTRA-TFIDF','EXTRA-W2V']#,'EXTRA-BERT']
names['RF'] = ['RF-FAST','RF-GLOVE','RF-CV','RF-TFIDF','RF-W2V']#,'RF-BERT']
names['SVM'] = ['SVM-FAST','SVM-GLOVE','SVM-CV','SVM-TFIDF','SVM-W2V']#,'SVM-BERT']
names['LR'] = ['LR-FAST','LR-GLOVE','LR-CV','LR-TFIDF','LR-W2V']#,'LR-BERT']
names['NB'] = ['NB-FAST','NB-GLOVE','NB-CV','NB-TFIDF','NB-W2V']#,'NB-BERT']
names['CNN'] = ['CNN-FAST','CNN-GLOVE','CNN-CV','CNN-TFIDF','CNN-W2V']#,'CNN-BERT']

#ajeitar o path p/load_predictions e o dataset
for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = accuracy_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} accuracy score: {score}")

for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = precision_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} precision score: {score}")

for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = recall_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} recall score: {score}")

for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = f1_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} f1 score: {score}")

#oracle group B 
names = {}
names['fast'] = ['MLP-FAST','KNN-FAST','EXTRA-FAST','RF-FAST','SVM-FAST','LR-FAST','NB-FAST','CNN-FAST']
names['glove'] = ['MLP-GLOVE','KNN-GLOVE','EXTRA-GLOVE','RF-GLOVE','SVM-GLOVE','LR-GLOVE','NB-GLOVE','CNN-GLOVE']
names['cv'] = ['MLP-CV','KNN-CV','EXTRA-CV','RF-CV','SVM-CV','LR-CV','NB-CV','CNN-CV']
names['tfidf'] = ['MLP-TFIDF','KNN-TFIDF','EXTRA-TFIDF','RF-TFIDF','SVM-TFIDF','LR-TFIDF','NB-TFIDF','CNN-TFIDF']
names['w2v'] = ['MLP-W2V','KNN-W2V','EXTRA-W2V','RF-W2V','SVM-W2V','LR-W2V','NB-W2V','NB-W2V']
names['bert'] = ['MLP-BERT','KNN-BERT','EXTRA-BERT','RF-BERT','SVM-BERT','LR-BERT','NB-BERT','NB-BERT']

for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = accuracy_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} accuracy score: {score}")

for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = precision_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} precision score: {score}")

for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = recall_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} recall score: {score}")

for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = f1_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} f1 score: {score}")

#Accuracy
#LR
names = {}
dataset_name = 'buzzfeednews' 
names['buzzfeednews'] = ['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'NB-CV', 'RF-FAST', 'NB-W2V', 'RF-W2V', 'NB-TFIDF', 'SVM-CV', 'RF-TFIDF', 'SVM-FAST', 'LR-CV', 'LR-GLOVE', 'RF-GLOVE', 'RF-CV', 'CNN-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-CV', 'EXTRA-GLOVE', 'KNN-GLOVE', 'EXTRA-W2V', 'NB-FAST', 'MLP-CV', 'KNN-CV', 'MLP-TFIDF'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking LR obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#RF 
names = {}
names['buzzfeednews'] = ['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'NB-CV', 'RF-FAST', 'NB-TFIDF', 'SVM-CV', 'RF-TFIDF', 'SVM-FAST', 'LR-CV', 'LR-GLOVE', 'RF-GLOVE', 'RF-CV', 'CNN-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-CV', 'EXTRA-GLOVE', 'NB-FAST', 'MLP-CV', 'KNN-CV', 'MLP-TFIDF'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking RF obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#NB  
names = {}
names['buzzfeednews'] = ['EXTRA-TFIDF', 'CNN-FAST', 'NB-TFIDF', 'MLP-TFIDF'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking NB obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
print('accuracy ok')
#Precision
#LR
names = {}
names['buzzfeednews'] = ['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'MLP-GLOVE', 'NB-CV', 'MLP-W2V', 'RF-FAST', 'NB-W2V', 'RF-W2V', 'NB-TFIDF', 'SVM-W2V', 'SVM-CV', 'SVM-TFIDF', 'SVM-GLOVE', 'RF-TFIDF', 'SVM-FAST', 'LR-CV', 'LR-GLOVE', 'LR-W2V', 'RF-GLOVE', 'LR-FAST', 'RF-CV', 'CNN-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-CV', 'EXTRA-GLOVE', 'KNN-GLOVE', 'EXTRA-W2V', 'EXTRA-FAST', 'NB-FAST', 'MLP-CV', 'KNN-CV', 'MLP-TFIDF'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking LR obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#RF 
names = {}
names['buzzfeednews'] = ['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'NB-CV', 'RF-FAST', 'NB-TFIDF', 'SVM-CV', 'RF-TFIDF', 'SVM-FAST', 'LR-CV', 'LR-GLOVE', 'RF-GLOVE', 'RF-CV', 'CNN-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-CV', 'EXTRA-GLOVE', 'NB-FAST', 'MLP-CV', 'KNN-CV', 'MLP-TFIDF'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking RF obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#NB  
names = {}
names['buzzfeednews'] = ['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'NB-CV', 'RF-FAST', 'NB-TFIDF', 'RF-TFIDF', 'SVM-FAST', 'LR-CV', 'LR-GLOVE', 'RF-GLOVE', 'RF-CV', 'CNN-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-CV', 'EXTRA-GLOVE', 'NB-FAST', 'MLP-CV', 'KNN-CV', 'MLP-TFIDF'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking NB obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
print('precision ok')
#Recall
#LR
names = {} 
names['buzzfeednews'] = ['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'RF-W2V', 'SVM-CV', 'SVM-FAST', 'LR-CV', 'LR-GLOVE', 'RF-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-CV', 'KNN-TFIDF', 'MLP-CV', 'KNN-CV', 'MLP-TFIDF'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking LR obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#RF 
names = {}
names['buzzfeednews'] =['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'SVM-CV', 'LR-CV', 'LR-GLOVE', 'RF-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-CV', 'KNN-CV', 'MLP-TFIDF'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking RF obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#NB  
names = {}
names['buzzfeednews'] = ['SVM-CV'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking NB obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
print('recall ok')
#F1
#LR
names = {}
names['buzzfeednews'] = ['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'NB-CV', 'RF-FAST', 'NB-W2V', 'RF-W2V', 'NB-TFIDF', 'SVM-CV', 'RF-TFIDF', 'SVM-FAST', 'LR-CV', 'LR-GLOVE', 'RF-GLOVE', 'RF-CV', 'CNN-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-CV', 'KNN-TFIDF', 'KNN-GLOVE', 'EXTRA-W2V', 'NB-FAST', 'MLP-CV', 'KNN-CV', 'MLP-TFIDF'] 

label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking LR obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#RF 
names = {}
names['buzzfeednews'] =['EXTRA-CV', 'EXTRA-TFIDF', 'CNN-FAST', 'NB-CV', 'SVM-CV', 'RF-TFIDF', 'SVM-FAST', 'LR-CV', 'LR-GLOVE', 'RF-CV', 'CNN-GLOVE', 'MLP-FAST', 'CNN-W2V', 'KNN-FAST', 'KNN-W2V', 'CNN-TFIDF', 'CNN-CV', 'KNN-TFIDF', 'NB-FAST', 'MLP-CV', 'KNN-CV', 'MLP-TFIDF'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking RF obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#NB  
names = {}
names['buzzfeednews'] = ['SVM-CV']
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking NB obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
print('f1 ok')

#oracle group C
names = {}
dataset_name = 'buzzfeednews' 
names['clfs'] =  ['SVM-CV', 'SVM-TFIDF', 'SVM-W2V', 'SVM-GLOVE', 'SVM-FAST','KNN-CV', 'KNN-TFIDF','KNN-W2V', 'KNN-GLOVE', 'KNN-FAST',
        'MLP-CV','MLP-TFIDF','MLP-W2V','MLP-GLOVE','MLP-FAST','NB-CV','NB-TFIDF','NB-W2V','NB-GLOVE','NB-FAST',
        'EXTRA-CV','EXTRA-TFIDF','EXTRA-W2V','EXTRA-GLOVE','EXTRA-FAST','RF-CV','RF-TFIDF','RF-W2V','RF-GLOVE','RF-FAST',
        'LR-CV','LR-TFIDF','LR-W2V','LR-GLOVE','LR-FAST','CNN-CV','CNN-TFIDF','CNN-W2V','CNN-GLOVE','CNN-FAST']

for name in ['clfs']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    acc_score = accuracy_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} accuracy score: {acc_score}")
    pre_score = precision_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} precision score: {pre_score}")
    rec_score = recall_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} recall score: {rec_score}")
    #f1_score = f1_score(label.to_numpy(), oracle_preds, average='macro')
    #print(f"{name} f1 score: {f1_score}")

for name in ['clfs']:
    f1_score = f1_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} f1 score: {f1_score}")

"""## Kaggle"""

#ajeitar o path p/load_predictions e o dataset
#oracle group A
names = {}
names['MLP'] = ['MLP-FAST','MLP-GLOVE','MLP-CV','MLP-TFIDF','MLP-W2V']#,'MLP-BERT']
names['KNN'] = ['KNN-FAST','KNN-GLOVE','KNN-CV','KNN-TFIDF','KNN-W2V']#,'KNN-BERT']
names['EXTRA'] = ['EXTRA-FAST','EXTRA-GLOVE','EXTRA-CV','EXTRA-TFIDF','EXTRA-W2V']#,'EXTRA-BERT']
names['RF'] = ['RF-FAST','RF-GLOVE','RF-CV','RF-TFIDF','RF-W2V']#,'RF-BERT']
names['SVM'] = ['SVM-FAST','SVM-GLOVE','SVM-CV','SVM-TFIDF','SVM-W2V']#,'SVM-BERT']
names['LR'] = ['LR-FAST','LR-GLOVE','LR-CV','LR-TFIDF','LR-W2V']#,'LR-BERT']
names['NB'] = ['NB-FAST','NB-GLOVE','NB-CV','NB-TFIDF','NB-W2V']#,'NB-BERT']
names['CNN'] = ['CNN-FAST','CNN-GLOVE','CNN-CV','CNN-TFIDF','CNN-W2V']#,'CNN-BERT']

#ajeitar o path p/load_predictions e o dataset
for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = accuracy_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} accuracy score: {score}")

for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = precision_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} precision score: {score}")

for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = recall_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} recall score: {score}")

for name in ['MLP', 'KNN', 'EXTRA', 'RF', 'SVM', 'LR', 'NB', 'CNN']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = f1_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} f1 score: {score}")

#oracle group B 
names = {}
names['fast'] = ['MLP-FAST','KNN-FAST','EXTRA-FAST','RF-FAST','SVM-FAST','LR-FAST','NB-FAST','CNN-FAST']
names['glove'] = ['MLP-GLOVE','KNN-GLOVE','EXTRA-GLOVE','RF-GLOVE','SVM-GLOVE','LR-GLOVE','NB-GLOVE','CNN-GLOVE']
names['cv'] = ['MLP-CV','KNN-CV','EXTRA-CV','RF-CV','SVM-CV','LR-CV','NB-CV','CNN-CV']
names['tfidf'] = ['MLP-TFIDF','KNN-TFIDF','EXTRA-TFIDF','RF-TFIDF','SVM-TFIDF','LR-TFIDF','NB-TFIDF','CNN-TFIDF']
names['w2v'] = ['MLP-W2V','KNN-W2V','EXTRA-W2V','RF-W2V','SVM-W2V','LR-W2V','NB-W2V','NB-W2V']
names['bert'] = ['MLP-BERT','KNN-BERT','EXTRA-BERT','RF-BERT','SVM-BERT','LR-BERT','NB-BERT','NB-BERT']

for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = accuracy_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} accuracy score: {score}")

for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = precision_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} precision score: {score}")

for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = recall_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} recall score: {score}")

for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    score = f1_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} f1 score: {score}")

#oracle group C
names = {}
names['clfs'] =  ['SVM-CV', 'SVM-TFIDF', 'SVM-W2V', 'SVM-GLOVE', 'SVM-FAST','KNN-CV', 'KNN-TFIDF','KNN-W2V', 'KNN-GLOVE', 'KNN-FAST',
        'MLP-CV','MLP-TFIDF','MLP-W2V','MLP-GLOVE','MLP-FAST','NB-CV','NB-TFIDF','NB-W2V','NB-GLOVE','NB-FAST',
        'EXTRA-CV','EXTRA-TFIDF','EXTRA-W2V','EXTRA-GLOVE','EXTRA-FAST','RF-CV','RF-TFIDF','RF-W2V','RF-GLOVE','RF-FAST',
        'LR-CV','LR-TFIDF','LR-W2V','LR-GLOVE','LR-FAST','CNN-CV','CNN-TFIDF','CNN-W2V','CNN-GLOVE','CNN-FAST']

for name in ['clfs']:
    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
    print(f"{name}: {oracle}")
    acc_score = accuracy_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} accuracy score: {acc_score}")
    pre_score = precision_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} precision score: {pre_score}")
    rec_score = recall_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} recall score: {rec_score}")
    f1_score = f1_score(label.to_numpy(), oracle_preds)#, average='macro')
    print(f"{name} f1 score: {f1_score}")

#Accuracy
#LR
names = {}
dataset_name = 'kaggle' 
names['kaggle'] = ['MLP-GLOVE', 'RF-W2V', 'SVM-W2V', 'CNN-TFIDF', 'CNN-CV', 'EXTRA-FAST', 'LR-CV', 'NB-CV', 'SVM-TFIDF', 'LR-FAST', 'CNN-FAST', 'MLP-FAST', 'CNN-GLOVE', 'KNN-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'MLP-TFIDF', 'KNN-GLOVE', 'KNN-CV', 'MLP-CV', 'MLP-TFIDF'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking LR obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#RF 
names = {}
names['kaggle'] = ['MLP-GLOVE', 'RF-W2V', 'SVM-W2V', 'SVM-GLOVE', 'CNN-TFIDF', 'CNN-CV', 'EXTRA-FAST', 'LR-CV', 'NB-CV', 'SVM-TFIDF', 'LR-FAST', 'CNN-FAST', 'MLP-FAST', 'CNN-GLOVE', 'KNN-FAST', 'EXTRA-CV', 'MLP-TFIDF', 'EXTRA-W2V', 'KNN-GLOVE', 'KNN-CV', 'MLP-CV', 'MLP-TFIDF'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking RF obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
#NB  
names = {}
names['kaggle'] = ['MLP-GLOVE', 'RF-W2V', 'SVM-W2V', 'CNN-TFIDF', 'SVM-TFIDF', 'CNN-FAST', 'MLP-FAST', 'CNN-GLOVE', 'KNN-FAST', 'EXTRA-CV', 'EXTRA-TFIDF', 'EXTRA-W2V', 'KNN-GLOVE', 'MLP-CV', 'MLP-TFIDF'] 
label, methods = load_predictions(dataset_name)
oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
print('Stacking NB obtained for a metric a oracle', oracle, 'considering a total instances:',len(label),'and a % of:',(oracle/len(label)*100),'%')
print('accuracy ok')

"""# Codigo Extra"""

#names = {}
#dataset_name = 'liar'

#lista com os integrantes que deram os melhores resultados no stacking 
#names['liar'] = ['SVM-FAST','MLP-GLOVE','RF-GLOVE','EXTRA-TFIDF','CNN-FAST','MLP-FAST','KNN-CV','KNN-W2V','CNN-CV','SVM-CV','NB-CV']
#['MLP-FAST','KNN-GLOVE','KNN-FAST','KNN-CV','MLP-W2V','NB-CV','NB-FAST','RF-CV','LR-CV','KNN-W2V']

#label, methods = load_predictions(dataset_name)
#oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[dataset_name])
#print(oracle)

#oracle group B 
#names = {}
#names['fast'] = ['MLP-FAST','KNN-FAST','EXTRA-FAST','RF-FAST','SVM-FAST','LR-FAST','NB-FAST','CNN-FAST']
#names['glove'] = ['MLP-GLOVE','KNN-GLOVE','EXTRA-GLOVE','RF-GLOVE','SVM-GLOVE','LR-GLOVE','NB-GLOVE','CNN-GLOVE']
#names['cv'] = ['MLP-CV','KNN-CV','EXTRA-CV','RF-CV','SVM-CV','LR-CV','NB-CV','CNN-CV']
#names['tfidf'] = ['MLP-TFIDF','KNN-TFIDF','EXTRA-TFIDF','RF-TFIDF','SVM-TFIDF','LR-TFIDF','NB-TFIDF','CNN-TFIDF']
#names['w2v'] = ['MLP-W2V','KNN-W2V','EXTRA-W2V','RF-W2V','SVM-W2V','LR-W2V','NB-W2V','NB-W2V']
#names['bert'] = ['MLP-BERT','KNN-BERT','EXTRA-BERT','RF-BERT','SVM-BERT','LR-BERT','NB-BERT','NB-BERT']
                
#for name in ['fast', 'glove', 'cv', 'tfidf', 'w2v']:
#    oracle, df_yes, oracle_preds = get_oracle(label.to_numpy(), methods, names[name])
#    print(f"{name}: {oracle}")
#    score = f1_score(label.to_numpy(), oracle_preds, average='macro')
#    print(f"{name} f1score: {score}")

#norm = Normalizer()
#X, y = make_classification()
#X_norm = norm.fit_transform(X)
#X_norm